<?php
/**
 * PostNuke Application Framework
 *
 * @copyright (c) 2002, PostNuke Development Team
 * @link http://www.postnuke.com
 * @version $Id: pnadmin.php 22281 2007-06-26 19:27:44Z markwest $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package PostNuke_System_Modules
 * @subpackage Profile
 * @author Mark West
 */

/**
 * The main administration function
 * This function is the default function, and is called whenever the
 * module is initiated without defining arguments.  As such it can
 * be used for a number of things, but most commonly it either just
 * shows the module menu and returns or calls whatever the module
 * designer feels should be the default function (often this is the
 * view() function)
 *
 * @return string HTML string
 */
function Profile_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('Profile::item', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = pnRender::getInstance('Profile');

    // Return the output
    return $pnRender->fetch('profile_admin_main.htm');;
}

/**
 * Add new dynamic user data item
 * This is a standard function that is called whenever an administrator
 * wishes to create a new module item
 * @author Mark West
 * @return string HTML string
 */
function Profile_admin_new()
{
    // Security check
    if (!SecurityUtil::checkPermission('Profile::item', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = pnRender::getInstance('Profile', false);

    $pnRender->assign('dtypes',           array(1 => DataUtil::formatForDisplay(_PROFILE_STRING),
                                                2 => DataUtil::formatForDisplay(_PROFILE_TEXT),
                                                3 => DataUtil::formatForDisplay(_PROFILE_FLOAT),
                                                4 => DataUtil::formatForDisplay(_PROFILE_INTEGER)));

    $pnRender->assign('displaytypes',     array(0 => DataUtil::formatForDisplay(_PROFILE_FIELDTEXT),
                                                1 => DataUtil::formatForDisplay(_PROFILE_FIELDTEXTAREA),
                                                2 => DataUtil::formatForDisplay(_PROFILE_FIELDCHECKBOX),
                                                3 => DataUtil::formatForDisplay(_PROFILE_FIELDRADIO),
                                                4 => DataUtil::formatForDisplay(_PROFILE_FIELDSELECT),
                                                5 => DataUtil::formatForDisplay(_PROFILE_FIELDDATE),
                                                6 => DataUtil::formatForDisplay(_PROFILE_FIELDEXTDATE),
                                                7 => DataUtil::formatForDisplay(_PROFILE_FIELDCOMBOTEXT)));

    $pnRender->assign('requiredoptions',  array(0 => DataUtil::formatForDisplay(_NO),
                                                1 => DataUtil::formatForDisplay(_YES)));

    $pnRender->assign('viewbyoptions',    array(0 => DataUtil::formatForDisplay(_PROFILE_VIEWBYOPTIONALL),
                                                1 => DataUtil::formatForDisplay(_PROFILE_VIEWBYOPTIONUSR),
                                                2 => DataUtil::formatForDisplay(_PROFILE_VIEWBYOPTIONADM)));
/*
    $pnRender->assign('adminonlyoptions', array(0 => DataUtil::formatForDisplay(_NO),
                                                1 => DataUtil::formatForDisplay(_YES))); */

    // Return the output that has been generated by this function
    return $pnRender->fetch('profile_admin_new.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by template_admin_new() to create a new item
 * @author Mark West
 * @see Profile_admin_new()
 * @param string 'label' the name of the item to be created
 * @param string 'dtype' the data type of the item to be created
 * @param int 'length' the length of the item to be created if dtype is string
 * @return bool true if item created, false otherwise
 */
function Profile_admin_create($args)
{
    // Get parameters from whatever input we need.
    $label       = FormUtil::getPassedValue('label',       (isset($args['label']) ? $args['label'] : null), 'POST');
    $required    = FormUtil::getPassedValue('required',    (isset($args['required']) ? $args['required'] : null), 'POST');
    $viewby      = FormUtil::getPassedValue('viewby',      (isset($args['viewby']) ? $args['viewby'] : null), 'POST');
    $dtype       = FormUtil::getPassedValue('dtype',       (isset($args['dtype']) ? $args['dtype'] : null), 'POST');
    $length      = FormUtil::getPassedValue('length',      (isset($args['length']) ? $args['length'] : null), 'POST');
    $displaytype = FormUtil::getPassedValue('displaytype', (isset($args['displaytype']) ? $args['displaytype'] : null), 'POST');
    $listoptions = FormUtil::getPassedValue('listoptions', (isset($args['listoptions']) ? $args['listoptions'] : null), 'POST');
    $note        = FormUtil::getPassedValue('note',        (isset($args['note']) ? $args['note'] : null), 'POST');
    $validation  = FormUtil::getPassedValue('validation',  (isset($args['validation']) ? $args['validation'] : null), 'POST');

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Profile', 'admin', 'view'));
    }

    // Check if empty or already existing...
    if (empty($label)) {
        LogUtil::registerError (_PROFILE_EMPTYLABEL);
        return pnRedirect(pnModURL('Profile', 'admin', 'view'));
    }
    if (pnModAPIFunc('Profile', 'user', 'get', array('proplabel' => $label))) {
        LogUtil::registerError (_PROFILE_LABELEXISTS);
        return pnRedirect(pnModURL('Profile', 'admin', 'view'));
    }

    // The API function is called.
    $dudid = pnModAPIFunc('Profile', 'admin', 'create',
                          array('label'        => $label,
                                'required'     => $required,
                                'viewby'       => $viewby,
                                'dtype'        => $dtype,
                                'length'       => $length,
                                'displaytype'  => $displaytype,
                                'listoptions'  => $listoptions,
                                'note'         => $note,
                                'validation'   => $validation));

    // The return value of the function is checked here
    if ($dudid != false) {
        // Success
        LogUtil::registerStatus (pnML('_CREATEITEMSUCCEDED', array('i' => _PROFILE_PROPERTY)));
    }

    // This function generated no output
    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}

/**
 * Modify a dynamic user data item
 * This is a standard function that is called whenever an administrator
 * wishes to modify a current module item
 * @author Mark West
 * @param int 'dudid' the id of the item to be modified
 * @param int 'objectid' generic object id maps to dudid if present
 * @return string HTML string
 */
function Profile_admin_modify($args)
{
    // Get parameters from whatever input we need.
    $dudid 		= (int)FormUtil::getPassedValue('dudid', 	(isset($args['dudid']) ? $args['dudid'] : null), 'GET');
    $objectid 	= (int)FormUtil::getPassedValue('objectid', (isset($args['objectid']) ? $args['objectid'] : null), 'GET');

    // At this stage we check to see if we have been passed $objectid
    if (!empty($objectid)) {
        $dudid = $objectid;
    }

    // Create output object
    $pnRender = pnRender::getInstance('Profile', false);

    // The user API function is called.
    $item = pnModAPIFunc('Profile', 'user', 'get',
                         array('propid' => $dudid));

    if ($item == false) {
        return LogUtil::registerError (pnML('_NOSUCHITEMFOUND', array('i' => _PROFILE_PROPERTY)), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission('Profile::item', "$item[prop_label]::$dudid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Add a hidden variable for the item id.
    $pnRender->assign('dudid', $dudid);

    $pnRender->assign('displaytypes',     array(0 => DataUtil::formatForDisplay(_PROFILE_FIELDTEXT),
                                                1 => DataUtil::formatForDisplay(_PROFILE_FIELDTEXTAREA),
                                                2 => DataUtil::formatForDisplay(_PROFILE_FIELDCHECKBOX),
                                                3 => DataUtil::formatForDisplay(_PROFILE_FIELDRADIO),
                                                4 => DataUtil::formatForDisplay(_PROFILE_FIELDSELECT),
                                                5 => DataUtil::formatForDisplay(_PROFILE_FIELDDATE),
                                                6 => DataUtil::formatForDisplay(_PROFILE_FIELDEXTDATE),
                                                7 => DataUtil::formatForDisplay(_PROFILE_FIELDCOMBOTEXT)));

    $pnRender->assign('dtypes',           array(1 => DataUtil::formatForDisplay(_PROFILE_STRING),
                                                2 => DataUtil::formatForDisplay(_PROFILE_TEXT),
                                                3 => DataUtil::formatForDisplay(_PROFILE_FLOAT),
                                                4 => DataUtil::formatForDisplay(_PROFILE_INTEGER)));

    $pnRender->assign('requiredoptions',  array(0 => DataUtil::formatForDisplay(_NO),
                                                1 => DataUtil::formatForDisplay(_YES)));

    $pnRender->assign('viewbyoptions',    array(0 => DataUtil::formatForDisplay(_PROFILE_VIEWBYOPTIONALL),
                                                1 => DataUtil::formatForDisplay(_PROFILE_VIEWBYOPTIONUSR),
                                                2 => DataUtil::formatForDisplay(_PROFILE_VIEWBYOPTIONADM)));
/*
    $pnRender->assign('adminonlyoptions', array(0 => DataUtil::formatForDisplay(_NO),
                                                1 => DataUtil::formatForDisplay(_YES))); */

    $item['prop_listoptions'] = str_replace("\n", "", $item['prop_listoptions']);

    $pnRender->assign('item', $item);

    // Return the output that has been generated by this function
    return $pnRender->fetch('profile_admin_modify.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by template_admin_modify() to update a current item
 * @author Mark West
 * @see ProfileModify()
 * @param int 'dudid' the id of the item to be updated
 * @param int 'objectid' generic object id maps to dudid if present
 * @param string 'label' the name of the item to be updated
 * @param string 'dtype' the data type of the item
 * @param int 'length' the lenght of item if dtype is string
 * @return bool true if update successful, false otherwise
 */
function Profile_admin_update($args)
{
    // Get parameters from whatever input we need.
    $dudid = (int)FormUtil::getPassedValue('dudid', 	   (isset($args['dudid']) ? $args['dudid'] : null), 'POST');
    $objectid = (int)FormUtil::getPassedValue('objectid',  (isset($args['objectid']) ? $args['objectid'] : null), 'POST');
    $label       = FormUtil::getPassedValue('label',       (isset($args['label']) ? $args['label'] : null), 'POST');
    $required    = FormUtil::getPassedValue('required',    (isset($args['required']) ? $args['required'] : null), 'POST');
    $viewby      = FormUtil::getPassedValue('viewby',      (isset($args['viewby']) ? $args['viewby'] : null), 'POST');
    $dtype       = FormUtil::getPassedValue('dtype',       (isset($args['dtype']) ? $args['dtype'] : null), 'POST');
    $length      = FormUtil::getPassedValue('length',      (isset($args['length']) ? $args['length'] : null), 'POST');
    $displaytype = FormUtil::getPassedValue('displaytype', (isset($args['displaytype']) ? $args['displaytype'] : null), 'POST');
    $listoptions = FormUtil::getPassedValue('listoptions', (isset($args['listoptions']) ? $args['listoptions'] : null), 'POST');
    $note        = FormUtil::getPassedValue('note',        (isset($args['note']) ? $args['note'] : null), 'POST');
    $validation  = FormUtil::getPassedValue('validation',  (isset($args['validation']) ? $args['validation'] : null), 'POST');

    // At this stage we check to see if we have been passed $objectid
    if (!empty($objectid)) {
        $dudid = $objectid;
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Profile', 'admin', 'view'));
    }

    // The return value of the function is checked here
    if (pnModAPIFunc('Profile', 'admin', 'update',
                    array('dudid'       => $dudid,
                          'required'    => $required,
                          'viewby'      => $viewby,
                          'label'       => $label,
                          'dtype'       => $dtype,
                          'length'      => $length,
                          'displaytype' => $displaytype,
                          'listoptions' => str_replace("\n", "", $listoptions),
                          'note'        => $note,
                          'validation'  => $validation))) {
        // Success
        LogUtil::registerStatus (pnML('_UPDATEITEMSUCCEDED', array('i' => _PROFILE_PROPERTY)));
    }

    // This function generated no output
    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by template_admin_modify() to update a current item
 * @author Mark West
 * @see ProfileModify()
 * @param int 'dudid' the id of the item to be updated
 * @param int 'objectid' generic object id maps to dudid if present
 * @param string 'label' the name of the item to be updated
 * @param string 'dtype' the data type of the item
 * @param int 'length' the lenght of item if dtype is string
 * @return bool true if update successful, false otherwise
 */
function Profile_admin_increase_weight($args)
{

    $dudid = (int)FormUtil::getPassedValue('dudid', null, 'GET');

    $item = pnModAPIFunc('Profile', 'user', 'get', array('propid' => $dudid));

    if ($item == false) {
        return LogUtil::registerError (pnML('_NOSUCHITEMFOUND', array('i' => _PROFILE_PROPERTY)), 404);
    }

    $new_weight = $item['prop_weight'] + 1;
    // The return value of the function is checked here
    if (pnModAPIFunc('Profile', 'admin', 'update',
                    array('dudid'       => $dudid,
                          'required'    => $item['prop_required'],
                          'viewby'      => $item['prop_viewby'],
                          'label'       => $item['prop_label'],
                          'dtype'       => $item['prop_dtype'],
                          'length'      => $item['prop_length'],
                          'displaytype' => $item['prop_displaytype'],
                          'prop_weight' => $new_weight,
                          'listoptions' => str_replace("\n", "", $item['prop_listoptions']),
                          'note'        => $item['prop_note'],
                          'validation'  => $item['prop_validation']))) {
        // Success
        LogUtil::registerStatus (pnML('_UPDATEITEMSUCCEDED', array('i' => _PROFILE_PROPERTY)));
    }

    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}

function Profile_admin_decrease_weight($var)
{
    $dudid = (int)FormUtil::getPassedValue('dudid', null, 'GET');

    $item = pnModAPIFunc('Profile', 'user', 'get', array('propid' => $dudid));

    if ($item == false) {
        return LogUtil::registerError (pnML('_NOSUCHITEMFOUND', array('i' => _PROFILE_PROPERTY)), 404);
    }

    $new_weight = $item['prop_weight'] - 1;
    // The return value of the function is checked here
    if (pnModAPIFunc('Profile', 'admin', 'update',
                    array('dudid'       => $dudid,
                          'required'    => $item['prop_required'],
                          'viewby'      => $item['prop_viewby'],
                          'label'       => $item['prop_label'],
                          'dtype'       => $item['prop_dtype'],
                          'length'      => $item['prop_length'],
                          'displaytype' => $item['prop_displaytype'],
                          'prop_weight' => $new_weight,
                          'listoptions' => str_replace("\n", "", $item['prop_listoptions']),
                          'note'        => $item['prop_note'],
                          'validation'  => $item['prop_validation']))) {
        // Success
        LogUtil::registerStatus (pnML('_UPDATEITEMSUCCEDED', array('i' => _PROFILE_PROPERTY)));
    }

    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}

/**
 * delete item
 * This is a standard function that is called whenever an administrator
 * wishes to delete a current module item.  Note that this function is
 * the equivalent of both of the modify() and update() functions above as
 * it both creates a form and processes its output.  This is fine for
 * simpler functions, but for more complex operations such as creation and
 * modification it is generally easier to separate them into separate
 * functions.  There is no requirement in the PostNuke MDG to do one or the
 * other, so either or both can be used as seen appropriate by the module
 * developer
 * @author Mark West
 * @param int 'dudid' the id of the item to be deleted
 * @param int 'objectid' generic object id maps to dudid if present
 * @param bool 'confirmation' confirmation that this item can be deleted
 * @return mixed HTML string if no confirmation, true if delete successful, false otherwise
 */
function Profile_admin_delete($args)
{
    // Get parameters from whatever input we need.
    $dudid = (int)FormUtil::getPassedValue('dudid', 	   (isset($args['dudid']) ? $args['dudid'] : null), 'GETPOST');
    $objectid = (int)FormUtil::getPassedValue('objectid',  (isset($args['objectid']) ? $args['objectid'] : null), 'GETPOST');
    $confirmation = (bool)FormUtil::getPassedValue('confirmation',  (isset($args['confirmation']) ? $args['confirmation'] : null), 'GETPOST');

    // At this stage we check to see if we have been passed $objectid
    if (!empty($objectid)) {
        $dudid = $objectid;
    }

    // The user API function is called.
    $item = pnModAPIFunc('Profile', 'user', 'get',
                         array('propid' => $dudid));

    if ($item == false) {
        return LogUtil::registerError (pnML('_NOSUCHITEMFOUND', array('i' => _PROFILE_PROPERTY)), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission('Profile::item', "$item[prop_label]::$dudid", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet - display a suitable form to obtain confirmation
        // of this action from the user

        // Create output object
        $pnRender = pnRender::getInstance('Profile', false);

        // Add hidden item id to form
        $pnRender->assign('dudid', $dudid);

        // Return the output that has been generated by this function
        return $pnRender->fetch('profile_admin_delete.htm');
    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Profile', 'admin', 'view'));
    }

    // The API function is called.
    if (pnModAPIFunc('Profile', 'admin', 'delete',
                     array('dudid' => $dudid))) {
        // Success
        LogUtil::registerStatus (pnML('_DELETEITEMSUCCEDED', array('i' => _PROFILE_PROPERTY)));
    }

    // This function generated no output
    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}

/**
 * View all items held by this module
 * @author Mark West
 * @return string HTML string
 */
function Profile_admin_view()
{
    // Security check
    if (!SecurityUtil::checkPermission('Profile::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Get parameters from whatever input we need.
    $startnum = (int)FormUtil::getPassedValue('startnum', null, 'GET');

    // load the user language file
    pnModLangLoad('Profile', 'user');

    // Create output object
    $pnRender = pnRender::getInstance('Profile', false);
    $pnRender->assign('startnum', $startnum);

    // The user API function is called.
    $items = pnModAPIFunc('Profile', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => pnModGetVar('Profile','itemsperpage')));


    $weightlimits = pnModAPIFunc('Profile', 'user', 'getweightlimits');
    $count        = pnModAPIFunc('Profile', 'user', 'countitems');
    $authid       = SecurityUtil::generateAuthKey();

    $x = 1;
    $itmcount = count($items);
    $duditems = array();
    foreach ($items as $item) {

        if (SecurityUtil::checkPermission('Profile::', "$item[prop_label]::$item[prop_id]", ACCESS_READ)) {
            // display the proper icom and link to enable or disable the field
            switch (true) {
                // Mandatory Images can't be disabled
                case ($item['prop_dtype'] == UDCONST_MANDATORY):
                    $status = array('url' => '', 'image' => 'greenled.gif',  'title' => _REQUIRED);
                    break;
                case ($item['prop_weight'] <> 0):
                     $status = array('url'   => pnModURL('Profile','admin','deactivate',array('dudid'    => $item['prop_id'],
                                                                                              'weight'   => $item['prop_weight'],
                                                                                              'authid'   => $authid,
                                                                                              'startnum' => $startnum)),
                                     'image' => 'greenled.gif',
                   'title' => _DEACTIVATE);
                    break;
                default:
                     $status = array('url'   => pnModURL('Profile','admin','activate',array('dudid'    => $item['prop_id'],
                                                                                            'weight'   => $item['prop_weight'],
                                                                                            'authid'   => $authid,
                                                                                            'startnum' => $startnum)),
                                     'image' => 'redled.gif',
                   'title' => _ACTIVATE);
            }

            switch ($item['prop_dtype']) {
                case UDCONST_MANDATORY:
                    $data_type_text = _PROFILE_MANDATORY;
                    $data_length_text = _PROFILE_NA;
                    break;
                case UDCONST_CORE:
                    $data_type_text = (($item['prop_required']==0) ? _PROFILE_CORE : _PROFILE_COREREQUIRED);
                    $data_length_text = _PROFILE_NA;
                    break;
                case UDCONST_STRING:
                    $data_type_text = (($item['prop_required']==0) ? _PROFILE_STRING : _PROFILE_STRINGREQUIRED);
                    if (isset($item['prop_length'])) {
                        $data_length_text = $item['prop_length'];
                    } else {
                        $data_length_text = '0';
                    }
                    break;
                case UDCONST_TEXT:
                    $data_type_text = (($item['prop_required']==0) ? _PROFILE_TEXT : _PROFILE_TEXTREQUIRED);
                    $data_length_text = _PROFILE_NA;
                    break;
                case UDCONST_FLOAT:
                    $data_type_text = (($item['prop_required']==0) ? _PROFILE_FLOAT : _PROFILE_FLOATREQUIRED);
                    $data_length_text = _PROFILE_NA;
                    break;
                case UDCONST_INTEGER:
                    $data_type_text = (($item['prop_required']==0) ? _PROFILE_INTEGER : _PROFILE_INTEGERREQUIRED);
                    $data_length_text = _PROFILE_NA;
                    break;
                default:
                    $data_length_text = '';
                    $data_type_text = '';
            }

            // Options for the item.
            $options = array();
            if (SecurityUtil::checkPermission('Profile::', "$item[prop_label]::$item[prop_id]", ACCESS_EDIT)) {
                $options[] = array('url' => pnModURL('Profile', 'admin', 'modify', array('dudid' => $item['prop_id'])),
                                   'image' => 'xedit.gif',
                                   'class' => '',
                                   'title' => _EDIT);
                if ($item['prop_weight'] > 1) {
                    $options[] = array('url' => pnModURL('Profile', 'admin', 'decrease_weight', array('dudid' => $item['prop_id'])),
                                       'image' => '2uparrow.gif',
                                       'class' => 'profile_up',
                                       'title' => _UP);
                }
                if ($x < $itmcount) {
                    $options[] = array('url' => pnModURL('Profile', 'admin', 'increase_weight', array('dudid' => $item['prop_id'])),
                                       'image' => '2downarrow.gif',
                                       'class' => 'profile_down',
                                       'title' => _DOWN);
                }
                if (SecurityUtil::checkPermission('Profile::', "$item[prop_label]::$item[prop_id]", ACCESS_DELETE) && $item['prop_dtype'] > 0) {
                    $options[] = array('url' => pnModURL('Profile', 'admin', 'delete', array('dudid' => $item['prop_id'])),
                                       'image' => '14_layer_deletelayer.gif',
                                       'class' => '',
                                       'title' => _DELETE);
                }
            }

            $item['status'] = $status;
            $item['options'] = $options;
            $item['dtype'] = $data_type_text;
            $item['length'] = $data_length_text;
            $duditems[] = $item;
            $x++;
        }
    }
    $pnRender->assign('duditems', $duditems);

    // assign the values for the smarty plugin to produce a pager in case of there
    // being many items to display.
    $pnRender->assign('pager', array('numitems'     => pnModAPIFunc('Profile', 'user', 'countitems'),
                                     'itemsperpage' => pnModGetVar('Profile', 'itemsperpage')));

    // Return the output that has been generated by this function
    return $pnRender->fetch('profile_admin_view.htm');
}

/**
 * This is a standard function to modify the configuration parameters of the
 * module
 * @author Mark West
 * @return string HTML string
 */
function Profile_admin_modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('Profile::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = pnRender::getInstance('Profile', false);

    // Append module configuration to template
    $pnRender->add_core_data();

    // Return the output that has been generated by this function
    return $pnRender->fetch('profile_admin_modifyconfig.htm');
}

/**
 * This is a standard function to update the configuration parameters of the
 * module given the information passed back by the modification form
 * @author Mark West
 * @see Profile_modifyconfig()
 * @param int 'itemsperpage' the number of items to display on each page in admin view
 * @return bool true if update successful, false otherwise
 */
function Profile_admin_updateconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('Profile::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Profile', 'admin', 'view'));
    }

    // Update module variables.
    $itemsperpage = (int)FormUtil::getPassedValue('itemsperpage', 10, 'POST');
    pnModSetVar('Profile', 'itemsperpage', $itemsperpage);
    $itemsperrow = (int)FormUtil::getPassedValue('itemsperrow', 5, 'POST');
    pnModSetVar('Profile', 'itemsperrow',  $itemsperrow);
    $displaygraphics = (bool)FormUtil::getPassedValue('displaygraphics', 0, 'POST');
    pnModSetVar('Profile', 'displaygraphics', $displaygraphics);

    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module','updateconfig','Profile', array('module' => 'Profile'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus (_CONFIGUPDATED);

    // This function generated no output
    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}

/**
 * Process item activation request
 * @author Mark West
 * @param int 'dudid' id of item activate
 * @param int 'weight' current weight of item
 * @return bool true if activation successful, false otherwise
 * @todo remove passing of weight parameter; can be got from API
 */
function Profile_admin_activate($args)
{
    // Get parameters from whatever input we need.
    $dudid  = (int) FormUtil::getPassedValue('dudid',  (isset($args['dudid']) ? $args['dudid'] : null), 'GET');
    $weight = (int) FormUtil::getPassedValue('weight', (isset($args['weight']) ? $args['weight'] : null), 'GET');

    // The API function is called.
    if (pnModAPIFunc('Profile', 'admin', 'activate',
                    array('dudid' => $dudid,
                          'weight' => $weight))) {
        // Success
        LogUtil::registerStatus (_UPDATESUCCEDED);
    }

    // This function generated no output
    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}

/**
 * Process item deactivation request
 * @author Mark West
 * @param int 'dudid' id of item deactivate
 * @param int 'weight' current weight of item
 * @return bool true if deactivation successful, false otherwise
 * @todo remove passing of weight parameter; can be got from API
 */
function Profile_admin_deactivate($args)
{
    // Get parameters from whatever input we need.
    $dudid  = (int) FormUtil::getPassedValue('dudid',  (isset($args['dudid']) ? $args['dudid'] : null), 'GET');
    $weight = (int) FormUtil::getPassedValue('weight', (isset($args['weight']) ? $args['weight'] : null), 'GET');

    // Confirm authorisation code.
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Profile', 'admin', 'view'));
    }

    // The API function is called.
    if (pnModAPIFunc('Profile', 'admin', 'deactivate',
                    array('dudid' => $dudid,
                          'weight' => $weight))) {
        // Success
        LogUtil::registerStatus (_UPDATESUCCEDED);
    }

    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module','updateconfig','Profile', array('module' => 'Profile'));

    // This function generated no output
    return pnRedirect(pnModURL('Profile', 'admin', 'view'));
}
