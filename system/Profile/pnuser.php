<?php
/**
 * PostNuke Application Framework
 *
 * @copyright (c) 2002, PostNuke Development Team
 * @link http://www.postnuke.com
 * @version $Id: pnuser.php 22968 2007-10-13 16:00:29Z markwest $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package PostNuke_System_Modules
 * @subpackage Profile
 */

/**
 * the main user function
 * This function is the default function, and is called whenever the module is
 * initiated without defining arguments.  As such it can be used for a number
 * of things, but most commonly it either just shows the module menu and
 * returns or calls whatever the module designer feels should be the default
 * function (often this is the view() function)
 * @author Mark West
 * @return string HTML string
 */
function Profile_user_main()
{
    // Security check
    if ((!pnUserLoggedIn()) || (!SecurityUtil::checkPermission('Profile::', '::', ACCESS_READ))) {
        return LogUtil::registerPermissionError();
    }

    // Get all user modules
    $usermods = pnModGetUserMods();

    if ($usermods == false) {
        return LogUtil::registerError(_NOITEMSFOUND, 404);
    }

    // Create output object
    $pnRender = pnRender::getInstance('Profile', null, null, true);

    // The API function is called.
    $accountlinks = pnModAPIFunc('Profile', 'user', 'accountlinks');

    // Assign the items to the template
    $pnRender->assign('accountlinks', $accountlinks);

    // Return the output that has been generated by this function
    return $pnRender->fetch('profile_user_main.htm');
}

/**
 * display item
 * This is a standard function to provide detailed informtion on a single item
 * available from the module.
 * @author Mark West
 * @return string HTML string
 */
function Profile_user_view($args)
{
    // Get parameters from whatever input we need.
    $uname = FormUtil::getPassedValue('uname', isset($args['uname']) ? $args['uname'] : null, 'GET');
    $uid = (int)FormUtil::getPassedValue('uid', isset($args['uid']) ? $args['uid'] : null, 'GET');

    if (isset($uname)) $uid = pnUserGetIDFromName($uname);
    if (!isset($uid) || (!($uid>1))) $uid = pnUserGetVar('uid');
    if ($uid == pnUserGetVar('uid')) return pnRedirect(pnModURL('Profile','user','main'));
    $url = pnModURL('MyProfile','user','display',array(	'uid'=>$uid,'uname'=>$uname	));
	return pnRedirect($url);
}

/**
 * modify a users profile information
 *
 * @author Franky Chestnut
 */
function Profile_user_modify($args)
{
	return pnRedirect(pnModURL('MyProfile','user','main'));
}


/**
 * update a users profile
 *
 * @author Franky Chestnut
 */
function Profile_user_update()
{
	return pnRedirect(pnModURL('MyProfile','user','main'));
}

/**
 * user_menu_add_option()
 *
 * This is a legacy function to add an icon to the user's menu.
 * To return these values to the new style API, we need to use
 * a global variable.
 * This is ugly and will be removed
 *
 * @param string $url the URL for the user action
 * @param string $title the description of the user action
 * @param string $image the icon
 **/
function user_menu_add_option($url, $title, $image)
{
    // replace images/menu/ -- the images must be moved to the (pn)images
    // directory of the module
    $image = preg_replace('#^' . pnConfigGetVar('userimg') . '/?#', '', $image);
    $GLOBALS['old_style_links'] = compact('url', 'title', 'image');
}

/**
 * usermenu()
 * This is a legacy function to add an icon to the user's menu.
 * To return these values to the new style API, we need to use
 * a global variable.
 * This is ugly and will be removed
 *
 * @param string $url the URL for the user action
 * @param string $title the description of the user action
 * @param string $image the icon
 **/
function usermenu($url, $title, $image)
{
    user_menu_add_option($url, $title, $image);
}
